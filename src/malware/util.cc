#include "util.h"

#include <cstdio>
#include <iostream>
#include <memory>
#include <stdexcept>
#include <string>
#include <array>

#include <cryptopp/base64.h>

using std::array;
using std::string;
using std::unique_ptr;
using CryptoPP::byte;
using CryptoPP::StringSink;
using CryptoPP::StringSource;
using CryptoPP::Base64Encoder;
using CryptoPP::Base64Decoder;

namespace sys_util {

string Exec(const string& cmd) {
  array<char, 128> buffer;
  string result;
  unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd.c_str(), "r"), pclose);

  while (fgets(buffer.data(), buffer.size(), pipe.get())) {
    result += buffer.data();
  }
  return result;
}

} // namespace sys_util


namespace string_util {

void Replace(string& s, const string& keyword, const string& newword) {
  string::size_type pos = s.find(keyword);

  while(pos != std::string::npos) {
    s.replace(pos, keyword.size(), newword);
    pos = s.find(keyword, pos + newword.size());
  }
}

string Base64Encode(const byte* bytes, size_t length) {
  string s;
  StringSource ssiv(bytes, length, true, new Base64Encoder(new StringSink(s), false));
  return s;
}

string Base64Decode(const string& str) {
  string s;
  StringSource ss(str, true, new Base64Decoder(new StringSink(s)));
  return s;
}

} // namespace string_util
